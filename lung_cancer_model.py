# -*- coding: utf-8 -*-
"""lung cancer model

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cY_xoPkZV9OUw42-PRYvddC89tZwI-Bo
"""

from google.colab import files
uploaded = files.upload()

"""Import Libraries"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

"""Load Dataset

"""

df = pd.read_csv("dataset_med.csv")
print(df.head())

"""Data Information which is basic"""

print(df.shape)
print(df.info())
print(df.describe())

"""Now We Check Missing Values"""

print(df.isnull().sum())

"""Encode Catagorical Value"""

categorical_cols = ["gender", "country", "cancer_stage", "family_history",
                    "smoking_status", "treatment_type"]

le_dict = {}
for col in categorical_cols:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    le_dict[col] = le

"""Define Feature and Target"""

X = df.drop(["survived"], axis=1)
y = df["survived"]

"""Split Data"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""Check all Numeric"""

print(X_train.dtypes)

"""Train Random Forest Model"""

# Drop any remaining non-numeric columns if they exist
non_numeric_cols = X_train.select_dtypes(include=['object']).columns
if len(non_numeric_cols) > 0:
    X_train = X_train.drop(columns=non_numeric_cols)
    X_test = X_test.drop(columns=non_numeric_cols)

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

"""Now We Do Pridiction"""

y_pred = model.predict(X_test)

"""Now Here we have the evaluation"""

print("âœ… Accuracy:", accuracy_score(y_test, y_pred))
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))